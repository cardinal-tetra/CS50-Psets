0.  It is the longest English word in the dictionary, and refers to a lung disease otherwise known as silicosis. 
1.  getrusage returns resource usage measures (depending on user's arguments) relating to the calling process for a particular function.
2.  I counted 16 members of the variable type struct rusage. 
3.  I think it is because if we pass in pointers, then we can check for NULL, thus checking for errors in the memory. 
4.  So the body of the for loop reads one character from the text at a time; if there is a alphabetical character or legitimate apostrophe, it will store it in an array capable of holding up to 45 characters, whilst using an index counter to keep track of the position along the word; the counter also checks that there are not more than 45 characters in the word, otherwise it reads remaining alphabetical characters and resets the counter to prepare for a new word; it will also read over the rest of the string if it encounters digits; if it has already read into a string (index is larger than zero) and encounters punctuation (other than apostrophe) or a space, then a cap is placed on the string stored in the array and it is spellchecked (with the time recorded); we update our counter on how many words we have found and any misspellings will be printed onto standard out and index is reset; this process is repeated all the way until we have reached the end of file.    
5.  There are quite a few problems: you will not be able to use an index counter so you cannot check whether you have exceeded the permitted length, neither can you use the (isdigit) or (isalpha) functions because they can only read one char at a time; you would need to rewrite the whole body of the for loop if you used fscanf.
6.  It improves accuracy because it does not allow modification of the data through the pointer we passed into our calculate function. 
7.  I used a trie to load the dictionary because it runs in constant time; inside each node there was a bool to indicate a word and an array of 27 node pointers, that was all.
8.  My code was actually very fast the first time I got it working properly. For the Austin Powers text, it matched the staff solution in terms of speed, being quicker to unload but slower to load. 
9.  My report from Valgrind indicated a huge number of memory errors, because I used malloc which returned memory address that was uninitialised, so I changed my code to use calloc instead, this actually slowed it down but removed the memory errors.
10. The necessary use of calloc seemed to have slightly slowed down my program which outperformed the staff solution in unloading but was slower to load and check, however these are small differences and would not be considered bottlenecks.
